<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-12-15T19:33:12+00:00</updated><id>/feed.xml</id><title type="html">Theo Dedeken</title><subtitle>Get more information about me, my curriculum and personal projects.</subtitle><entry><title type="html">Ludum Dare 46: Post Mortem</title><link href="/blog/2020/ld46-post-mortem" rel="alternate" type="text/html" title="Ludum Dare 46: Post Mortem" /><published>2020-04-23T00:00:00+00:00</published><updated>2020-04-23T00:00:00+00:00</updated><id>/blog/2020/ld46-post-mortem</id><content type="html" xml:base="/blog/2020/ld46-post-mortem"><![CDATA[<p>Last weekend I participated in the 46th edition of <a href="https://ldjam.com/">Ludum Dare</a>, a game jam where you get 48 hours to create a game from scratch (using tools and engines is allowed).
I had previously participated in other editions with my games <a href="/projects/traffic-troubles">Traffic Troubles</a> and <a href="/projects/sprout">Sprout</a>.
And just like those entries I was again going to implement my game using the <a href="https://phaser.io/">Phaser game engine</a>.
This is my post mortem on the things that went right and mostly wrong during the 48 hours of development.</p>
<h2 class='ui header' id="saturday">
      Saturday
    </h2>
<p>The theme, <strong>Keep It Alive</strong>, was announced at 3 AM in my local time, so instead of staying up until then I went for an early sleep and got up quite early on Saturday morning.</p>
<h3 class='ui header' id="morning---43h-left">
      Morning - 43h left
    </h3>
<p>Most of my Saturday morning was spent brainstorming game ideas.
Some of my early ideas were:</p>
<div class="ui bulleted list">
      <div class="item">Nature themed, keeping plants or flowers alive.
</div><div class="item">Air tower simulator, keeping passengers alive guiding planes to runways.
</div><div class="item">Keep a village alive, defending from invaders/monsters.
</div>
    </div>
<p>In the end the idea of keeping a combo alive came to me.
Inspired by old the old Flash games <a href="https://armorgames.com/play/6677/epic-combo">Epic Combo</a> and <a href="https://armorgames.com/play/13256/epic-combo-redux">Epic Combo Redux</a>, the idea of making a game where the aim is to create a bigger and bigger combo really sounded great. 
Now I just needed to find the right setting and I did: <strong>Gladiators in an arena</strong>. </p>

<p>At this point I still was thinking of letting the player control a gladiator (or executioner) in the arena going around hitting enemies to create a big combo.
This evolved over the day to creating combos by launching a gladiator into an arena filled with objects and other gladiators to interact with.</p>
<h3 class='ui header' id="afternoon---38h-left">
      Afternoon - 38h left
    </h3>
<p>Now with my idea and theme set I started exploring the technical side of things.
I quickly set up some colliding circles using the arcade physics engine and got things bouncing off eachother.
Then I ran into a limitation of the arcade engine, it only supports rectangular and circular colliders.
But for my arena to work I had to figure out a way to get the gladiators to bounce of the insides of an ellips.</p>

<p>So I started to research some of the properties of an ellips and quickly found a way to calculate the two focal points of an ellips of any size.
These focal points are important for the collision as another property of an ellips is that the tangent line of a point on the ellips is the outer bisector of the angle formed by the point and the two focal points.
This tangent determines the direction an object will bounce off when it collides with the ellips. 
Now I just needed to do some vector math to calculate the collision and reflection vector and after some debugging I had working elliptical collision!
However, most of my afternoon was gone.</p>

<p><div class="ui center aligned segment">
      <div class="ui rounded image">
        <img src="/assets/img/blog/ld46-post-mortem/screenshot-0.jpg" alt="elliptical collision" title="Just got elliptical collision working">
      </div>
      <div class='ui divider'></div>
    <div class="content">
        <h5 class="ui header">Just got elliptical collision working</h5>
    </div>
    </div></p>
<h3 class='ui header' id="evening---33h-left">
      Evening - 33h left
    </h3>
<p>In the evening I started on blocking the game out using circles and rectangles.
Afterwards I got the launch mechanic to work.
Towards the end of my day I noticed that Phaser 3 does not have a built in UI system anymore, I should have researched this more beforehand.
I could not really find a quick library to fit in my existing project so I just pulled the trigger and built something really simple just to cover my needs for the jam.
Then I went to sleep.</p>

<p><div class="ui center aligned segment">
      <div class="ui rounded image">
        <img src="/assets/img/blog/ld46-post-mortem/screenshot-2.jpg" alt="blocked out game" title="Blocked out the game using rectangles and circles">
      </div>
      <div class='ui divider'></div>
    <div class="content">
        <h5 class="ui header">Blocked out the game using rectangles and circles</h5>
    </div>
    </div></p>
<h2 class='ui header' id="sunday">
      Sunday
    </h2>
<p>A new day, over halfway, with not much of a game yet.
I really had to step up to make something finished out of what I had.</p>
<h3 class='ui header' id="morning---19h-left">
      Morning - 19h left
    </h3>
<p>Now that I had a basic UI system I drew up a state diagram on how the player could move through the game and started on implementing it.
The end result would have two screens an arena screen and an upgrade screen.
I added buttons to move back and forth and added UI for the different purchases of the upgrade screen.</p>

<p>Then I took a break from coding and created the first art of the game, the gladiator sprite.
I was thinking of doing vector graphics for the game instead of my usual pixel art.
But it had been years since I did any of that, so I still had to install software.
I checked out <a href="https://inkscape.org/">Inkscape</a>, but got overwhelmed by its complexity and searched for a simpler alternative.
I ended up with <a href="https://vectr.com/">Vectr</a>, a very basic drawing tool but ideal to learn quickly and powerful enough to create decent art.</p>
<h3 class='ui header' id="afternoon---14h-left">
      Afternoon - 14h left
    </h3>
<p>I added my gladiator sprite and moved on to implement the placing logic.
I needed the player to be able to buy placeables from the upgrade screen and to put them into the arena.
Then I also needed to save the state of the arena so that the placeables were kept inbetween rounds.
Simultaneously I added the concept of a <em>round</em>, which would last until the combo timed out.
Naturally I added the combo mechanic too and a basic gold mechanic which would add gold based on your previous combo.</p>

<p>At the end I could make the placeables have a certain cost to them.
This I implemented using exponential functions as the more you buy the easier it would be to generate gold.
I punched in some numbers which seemed reasonable and left it.</p>
<h3 class='ui header' id="evening---9h-left">
      Evening - 9h left
    </h3>
<p>Then it was really necessary to start making art, I still only had the gladiator sprite so I needed a bunch more to make my game look polished.
I made all the sprites from placeables to arena to UI in one big go.
I also made the sound effects.
This time I went for recorded sounds instead of generating them with <a href="https://www.bfxr.net/">bfxr</a>.
I quickly recorded some effects using my voice and shitty laptop microphone in <a href="https://www.audacityteam.org/">Audacity</a>, threw some filters over it (I have no idea how to do any of this sound stuff) until they sounded ok and cut them out.
Now time was really ticking, I added all art and sound to the game.</p>
<h3 class='ui header' id="night---4h-left">
      Night - 4h left
    </h3>
<p>I needed to make choices, my initial plan was to have multiple placeables and upgrades to be bought in the upgrade screen.
But now only the gladiator placeable was implemented.
I guessed that I would not have the time to implement the behaviors of the other placeables and set out to at least implement some basic things to be upgraded.
These upgrades were just changing a single value in the code so they were fairly easy to add.
For their cost I also just put some values into my exponential cost function without thinking too much about it.</p>

<p>At the end of this I just had less than two hours left before the deadline so I just polished the code and fixed bugs were I could.</p>

<p>Now for submission hour, I published my game on Github pages for the first time (play it <a href="http://www.theodedeken.xyz/morituri-combonaturi/">here</a>).
Luckily I had been playing around with Github actions the last few weeks so I got a deploy action set up in little time.
Then I just had to add my entry on the website and that was it for this event.
Now off to sleep and back tomorrow to start playing and rating games.</p>
<h2 class='ui header' id="conclusion">
      Conclusion
    </h2>
<p>When thinking about my run this year there are some obvious things I could have done better.</p>

<p>Firstly I could have prepared way more.
Now I just had the idea of what game engine to use but little to no idea about all the rest.
I could have done some tryouts of art and sound software, so i would not have had to spend time learning these things during the event.</p>

<p>Secondly I could have put less emphasis on creating perfect elliptical collision and maybe have found a quicker workaround.
It would have allowed to get way more work done on the first day.</p>

<p>Lastly I am not happy about the balancing of the game.
The cost of the upgrades don&#39;t really make that much sense and the game plays really slow at the beginning and then ramps up massively to the point of breaking near the end.
I guess games like these are notoriously hard to balance and need a lot of playtesting, which is not ideal in a jam setting</p>

<p>Overall I am still happy with what I achieved and I am looking forward to see my results.</p>
<div class="ui left rail" style="width:300px">
      <div class="ui sticky">
        <div class="ui segment">
          <h3 class="ui header">Table of contents</h3>
          <div class="ui list">
            <div class="item">
          <a href="#saturday">Saturday</a>
          <div class="list"><div class="item">
          <a href="#morning---43h-left">Morning - 43h left</a>
          
        </div><div class="item">
          <a href="#afternoon---38h-left">Afternoon - 38h left</a>
          
        </div><div class="item">
          <a href="#evening---33h-left">Evening - 33h left</a>
          
        </div></div>
        </div><div class="item">
          <a href="#sunday">Sunday</a>
          <div class="list"><div class="item">
          <a href="#morning---19h-left">Morning - 19h left</a>
          
        </div><div class="item">
          <a href="#afternoon---14h-left">Afternoon - 14h left</a>
          
        </div><div class="item">
          <a href="#evening---9h-left">Evening - 9h left</a>
          
        </div><div class="item">
          <a href="#night---4h-left">Night - 4h left</a>
          
        </div></div>
        </div><div class="item">
          <a href="#conclusion">Conclusion</a>
          
        </div>
          </div>
        </div>
      </div>
    </div>]]></content><author><name>Theo Dedeken</name></author><category term="game development" /><category term="post mortem" /><category term="game jam" /><category term="ludum dare" /><category term="48h" /><summary type="html"><![CDATA[Last weekend I participated in the 46th edition of Ludum Dare. This is my post mortem on the things that went right and mostly wrong during the 48 hours of development.]]></summary></entry><entry><title type="html">Leveling up my resume</title><link href="/blog/2019/leveling-up-my-resume" rel="alternate" type="text/html" title="Leveling up my resume" /><published>2019-02-20T00:00:00+00:00</published><updated>2019-02-20T00:00:00+00:00</updated><id>/blog/2019/leveling-up-my-resume</id><content type="html" xml:base="/blog/2019/leveling-up-my-resume"><![CDATA[<p>As my time studying is coming to an end, it is becoming time to start looking towards what is next in my future. Internship, job or volunteering, they all need a resume and a cover letter. As a true scientist my previous resumes and cover letters were all written in Latex. While Latex is fantastic in many aspects, some difficulties do arise when you try to use it in a context of a resume which likely will have a very distinct style. So for this round of applications I wanted to upgrade my process of constructing my resume and cover letter.</p>
<h2 class='ui header' id="making-my-own-template">
      Making my own template
    </h2>
<p>After reading this excellent <a href="https://medium.freecodecamp.org/writing-a-killer-software-engineering-resume-b11c91ef699d">Medium post</a>, which advocates a quite simple structure with clear concise information, I decided to make my own Latex template. </p>

<p>Writing your own template is rather easy for simple cases, but to add some more complex concepts you really start to notice the limitations of the Tex language. For example the use of simple control sequences like <code>if else</code> is very tedious. While making this I gained a lot more respect for the creators of some of the Latex packages in the ecosystem, writing such complex things must be a pain. </p>
<h2 class='ui header' id="generation-from-yml">
      Generation from yml
    </h2>
<p>The next step was to improve the creation of multiple resumes and cover letters. When writing multiple resumes for different applications, there will likely be only little differences adapting to the application itself with the most part being the same in all files. Doing this by editing <code>tex</code> files is a bit tedious as content and structure are intertwined. </p>

<p>To solve this I seperated the content of my resume and cover letter to <code>yml</code> files, which then get processed by scripts to generate the corresponding <code>tex</code> files to generate the pdfs.</p>
<h2 class='ui header' id="find-this-on-github">
      Find this on Github
    </h2>
<p>I have uploaded both of my templates as well as my script to Github in <a href="https://github.com/theodedeken/career-tools">this repository</a>. It has an open source license, so feel free to use it if you want! </p>
<div class="ui left rail" style="width:300px">
      <div class="ui sticky">
        <div class="ui segment">
          <h3 class="ui header">Table of contents</h3>
          <div class="ui list">
            <div class="item">
          <a href="#making-my-own-template">Making my own template</a>
          
        </div><div class="item">
          <a href="#generation-from-yml">Generation from yml</a>
          
        </div><div class="item">
          <a href="#find-this-on-github">Find this on Github</a>
          
        </div>
          </div>
        </div>
      </div>
    </div>]]></content><author><name>Theo Dedeken</name></author><category term="latex" /><category term="python" /><category term="career" /><category term="resume" /><category term="job" /><summary type="html"><![CDATA[As my time studying is coming to an end, it is becoming time to start looking towards what is next in my future. Internship, job or volunteering, they all need a resume and a cover letter. For this round of applications I wanted to upgrade my process of constructing my resume and cover letter.]]></summary></entry><entry><title type="html">Init 2019</title><link href="/blog/2019/init-2019" rel="alternate" type="text/html" title="Init 2019" /><published>2019-01-06T00:00:00+00:00</published><updated>2019-01-06T00:00:00+00:00</updated><id>/blog/2019/init-2019</id><content type="html" xml:base="/blog/2019/init-2019"><![CDATA[<p>A new year has started and while it is a bit of a cliché to make New Years&#39; resolutions. I&#39;m just gonna go ahead and do it anyway. I think it is important to quite regularly take a step back and determine what exactly the goals are that you are trying to achieve. </p>

<p>In that sense my resolutions are nothing more than me setting out a plan for what exactly I am working towards this year. Writing these down on paper, some place where they are noticeable enough gives me a better chance to actually complete them. I find it also important to look back on them at certain moments to be able to evaluate my progress so far.</p>

<p>I am quite ambitious with my goals this year, they will likely adapt over the course of it, but having written them down adds a bit more pressure to keep them.</p>
<h2 class='ui header' id="blogging">
      Blogging
    </h2>
<p>The first goal of this year was setting up this site as a personal portfolio and a place for my to post some blogs about my interests and the things I am currently working on. Ideally I would want to post at least once every two weeks but, preferably even once a week. The topics I would like to cover are:</p>
<div class="ui bulleted list">
      <div class="item">The games I am playing
</div><div class="item">The books I am reading
</div><div class="item">The projects I am working on
</div>
    </div><h2 class='ui header' id="new-programming-languages-and-frameworks">
      New programming languages and frameworks
    </h2>
<p>In this new year there are also a number of new programming languages and frameworks I would like to learn and get some experience with. Some of them will tie into some of the new projects I am planning, others I just find remarkable and would like to get to know better, perhaps then some project idea will emerge. </p>
<h3 class='ui header' id="elm">
      Elm
    </h3>
<p><div class="ui center aligned segment">
      <div class="ui rounded image">
        <img src="/assets/img/blog/init-2019/elm.png" alt="Elm" title="">
      </div>
      
    </div></p>

<p>I recently got to know a little language called Elm, for those of you who don&#39;t know it. It&#39;s a functional programming language that compiles to Javascript. It is only focused on building web apps, that way a lot of features of normal Javascript can be removed. What&#39;s left is a simple but powerful language that compiles to compact, safe and fast Javascript code(or so I can gather from the material I found online regarding this language). </p>

<p>I think it is a great addition to my skillset, not only because it provides me with some experience in the functional programming style. But also because front end development is something I have little experience with and having a type safe way to build web applications feels a lot better for a guy primarily interested in staticly typed languages.</p>
<h3 class='ui header' id="dart--flutter">
      Dart + Flutter
    </h3>
<p><div class="ui center aligned segment">
      <div class="ui rounded image">
        <img src="/assets/img/blog/init-2019/flutter.png" alt="Flutter" title="">
      </div>
      
    </div></p>

<p>Flutter is a platform for developing crossplatform native mobile apps from Google. It seems very promising, both in terms of performance and ease of development. Mobile development is another area where I lack some experience and being able to just publish apps for all platforms on one codebase does look very exciting. I am still unsure though on how mature the platform is currently. While there seems to be support in some IDEs including Google&#39;s own Android Studio, this might still be in the early stages.</p>
<h3 class='ui header' id="go">
      Go
    </h3>
<p><div class="ui center aligned segment">
      <div class="ui rounded image">
        <img src="/assets/img/blog/init-2019/go.png" alt="Go" title="">
      </div>
      
    </div></p>

<p>The last language I might have a look at this year is the Go language. The premise of being able to write concurrent procedures very easy, makes it feel like a great language for quick development for scalable backends. However the fact that it is garbage collected might incur some performance penalties. This combined with the fact that Rust also has quite simple concurrency with the added benefit of memory safety together with better performance, might make the usecases for this language quite limited. Nevertheless it will not hurt to have a look and experiment a bit.</p>
<h2 class='ui header' id="open-source">
      Open source
    </h2>
<p>I believe that Open Source software has an important purpose in providing the computer science world with easy to access and free code to help accelerate the development of programs. I have started a few repositories of my own with an Open Source license and in 2019 I would like to continue to build on them and try to establish communities around them. </p>

<p>On top of that I would also like to do my part and contribute to other Open Source projects I like. Likely I will focus on projects in the areas I am currently researching.</p>
<h2 class='ui header' id="spaxel-release">
      Spaxel release
    </h2>
<p><a href="/projects/spaxel">Spaxel</a> is a game I started developing not long after I first enrolled in my Computer Science degree. Now almost 5 years later I feel that it might be finally time to release it. </p>

<p>Spaxel is quite a simple and small game, however because I started implementing everything from scratch the development is taking a lot longer. Over the years I worked on and off on this project and it has gone through some major rewrites. Sometimes I feel like the purpose of this project is not to finish it but to provide me with a canvas to apply my new knowledge I have acquired over the years on. </p>

<p>But, as I am finishing up my studies, I think it is only fair to also provide a satisfying ending for this project. It probably will never be the game I have envisioned it to be in the beginning. But now it is time to move on and bring my attention to bigger and better projects. I will be developing the game to a sufficiently finished state. This will mean it will likely have little content and will not be worth releasing it as a priced game. So probably it will be a free download with all the source code being Open Source </p>
<div class="ui left rail" style="width:300px">
      <div class="ui sticky">
        <div class="ui segment">
          <h3 class="ui header">Table of contents</h3>
          <div class="ui list">
            <div class="item">
          <a href="#blogging">Blogging</a>
          
        </div><div class="item">
          <a href="#new-programming-languages-and-frameworks">New programming languages and frameworks</a>
          <div class="list"><div class="item">
          <a href="#elm">Elm</a>
          
        </div><div class="item">
          <a href="#dart--flutter">Dart + Flutter</a>
          
        </div><div class="item">
          <a href="#go">Go</a>
          
        </div></div>
        </div><div class="item">
          <a href="#open-source">Open source</a>
          
        </div><div class="item">
          <a href="#spaxel-release">Spaxel release</a>
          
        </div>
          </div>
        </div>
      </div>
    </div>]]></content><author><name>Theo Dedeken</name></author><category term="2019" /><category term="resolutions" /><category term="elm" /><category term="blog" /><category term="flutter" /><category term="go" /><category term="spaxel" /><summary type="html"><![CDATA[A new year has started and while it is a bit of a cliché to make New Years&#39; resolutions. I&#39;m just gonna go ahead and do it anyway. I think it is important to quite regularly take a step back and determine what exactly the goals are that you are trying to achieve.]]></summary></entry></feed>